Overview
========

sv.sh is a tiny supervisor written in bash.


SYNOPSIS
========

echo SPEC | ./sv.sh TAG
./sv.sh -h|--help
./sv.sh -v|--version
./sv.sh --check-env


DESCRIPTION
===========

sv.sh daemonize after start and run specified commands in SPEC.
If any child has terminated, then sv.sh run it again.

TAG is used to name a pid file and log files or as syslog tag (if a logging
to syslog is enabled). TAG shouldn't start with "-" (dash) and contains dot.

sv.sh can log to stdout/stderr, to files or to syslog. If SV_SYSLOG is not
empty, then sv.sh log to syslog. Otherwise, sv.sh log to files.

If sv.sh log to files, it creates separate files for sv stdout and stderr
and separate files for child stdout and stderr (4 files in total).
if sv.sh is got SIGHUP, it reopen it log and check a child log size. If a
child log is bigger than SV_PRG_LOGFILE_MAXSIZE bytes, then it stop a child
and run it again with a redirection to new log files. Thus, more often SIGHUP
is sent - better size control.

If sv.sh log to syslog, it logs its and child stdout/stderr to a specified
syslog priority. Logging to syslog is done via logger utility, which run in
the background.

if SV_HOOK is not empty, then its value is treat as hook script name. This
script is run on various events. See HOOK section below for details.

Before a first use it may be helpful to run sv.sh with --check-env option.
In this case, sv.sh checks existence of needed binaries and show the results.

SPEC
====

SPEC consist of command specs. Each command spec is a one line with the next
syntax:

ACT PRMS

Where:
 ACT
   Action. wait or run.
   wait - delay SPEC execution for a specified time(with units as a postfix;
          i.e. 2s, 10s, etc)
   run  - run a specified program
 PRMS
   action parameters.

 wait action parameters: TIME. TIME is a number with a time unit. I.e. 10s, 4s, etc.
 run action parameters: PRGTAG RS BIN [BIN_PRMS].
   PRGTAG is used for log messages. It shouldn't contains dot.
   RS is a restart strategy. one or all. one - if this program is terminated, then
   restart it. all - if this program is terminated, then restart all programs from
   SPEC.
   BIN is a binary to start.
   BIN_PRMS is a command line parameters for specified binary.


CONFIGURATION
=============

sv.sh has some parameters that can be changed with help of environment
variables.

SV_RESTART_DELAY
    The delay (with suffix s, m, etc) between child restarts.
    Default is 2s.
SV_LOGPATH
    The directory for log files.
	If a path isn't an absolute path, then it's converted to an absolute path
	by prepending "$PWD/" to it.
    If unset, then log to stdout/stderr.
    Default is "" (unset).
SV_PIDPATH
    The directory for pid file with our pid.
	If a path isn't an absolute path, then it's converted to an absolute path
	by prepending "$PWD/" to it.
    If unset, then do not create a pid file.
    Default is "" (unset).
SV_LOGFILES_CNT
    A maximum count of sv log files.
    Default is 30.
SV_PRG_LOGFILE_MAXSIZE
    Maximum size(in bytes) of child current log file for log reopening.
    Default is 10000000.
SV_PRG_LOGFILE_MAXCNT
    A maximum count of child log files.
    Default is 3.
SV_SYSLOG
    The value is a syslog priority (facility.level). See logger(1) for
    syntax (option -p).
    Default is "" (none).
SV_KILLSEQ
    A sequence of "SIGNAL/TIME_TO_WAIT" separated with / for child
    termination. There is no need to specify KILL, because SIGKILL is
    sent to child in any case if it isn't terminated after specified kill
    sequence.
    Default is "TERM/2s/TERM/4s".
SV_CHDIR
    Set to "no" to not change dir to / after startup.
    Default is "yes".
SV_HOOK
    Hook script.
	If a path isn't an absolute path, then it's converted to an absolute path
	by prepending "$PWD/" to it.
	See section HOOK below.


HOOK
====

Hook script is called by sv.sh in synchronous manner. That is, sv.sh don't do
any job during hook execution and wait until it is finished.

Hook script command line arguments: TAG EVENT [PRMS].
Where EVENT is on of:
svstart - sv is started. Before childs are started. PRMS: SVPID.
svstop  - stop of sv. After childs are stopped. The last action of execution.
          PRMS: SVPID.
start   - child is started. PRMS: PRGTAG PRGPID.
stop    - stop a child. Before SV_KILLSEQ is sent to a child. PRMS: PRGTAG PRGPID.
logrotate - child log is rotated. PRMS: FILENAME_PREV.
usr1    - got SIGUSR1.
usr2    - got SIGUSR2.

Where, SVPID is sv.sh pid; FILENAME_PREV is a previous log file name.

For start,usr1 and usr2 events, sv.sh checks an exit code of a hook. Exit code
should be one of:
0 - ok
101 - error, restart children (or this child for a start hook)
102 - error, stop sv
OTHER - error, stop sv

svstart can be used for cgroup/oom-killer configuration. svstop for some cleanup.
start for some actions that should be executed after a child is started.
stop can be used to terminate a child correctly if it can't be terminated gracefully
by some signal (e.g. vanilla tcl without signal handling package) and also for
some actions that sould be executed on child stop. logrotate can be used to
compress a previous log, for example.
usr1/usr2 can be used for some watchdog.

sv.sh export to a hook environment the next vars in addition to others:
SV_LOGPATH, SV_PIDPATH, CPIDS. Where CPIDS contains children pids in the next
format:
PRGTAG1 PID1
PRGTAG2 PID2
...

I.e. one line for an each child.


EXAMPLE
=======

A script to start some service can be like this:

#!/bin/bash
# Supervisor settings
export SV_PIDPATH=/var/run
export SV_SYSLOG=user.notice
echo "run prg1 one sleep 10s
run prg2 all sleep 35s" | ./sv.sh env1
